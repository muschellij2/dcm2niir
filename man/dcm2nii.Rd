% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dcm2nii.R
\name{dcm2nii}
\alias{dcm2nii}
\alias{dcm2nii_par_rec}
\alias{dcm2nii_bids_sidecar}
\alias{fix_sidecar}
\title{Simple run of DICOM 2 NIfTI Converter}
\usage{
dcm2nii(basedir = ".", copy_files = TRUE,
  progdir = system.file(package = "dcm2niir"), verbose = TRUE,
  dcm2niicmd = c("dcm2niix", "dcm2nii_2009", "dcm2nii"),
  merge_files = FALSE, ignore_derived = FALSE, opts = paste0("-9 ",
  ifelse(ignore_derived, "-i y ", ""), ifelse(merge_files, " -m y ", ""),
  paste0(" -v ", as.numeric(verbose)), " -z y -f \%p_\%t_\%s"), ...)

dcm2nii_par_rec(file = list.files(pattern = "[.](par|PAR)"),
  copy_files = TRUE, verbose = TRUE, ...)

dcm2nii_bids_sidecar(basedir, progdir = system.file(package =
  "dcm2niir"), dcm2niicmd = c("dcm2niix", "dcm2nii_2009", "dcm2nii"),
  ...)

fix_sidecar(file)
}
\arguments{
\item{basedir}{(character) directory to get files}

\item{copy_files}{(logical) Should files be copied to a temporary directory?}

\item{progdir}{(character) directory of bash scripts, no user input needed unless
binaries were installed elsewhere. Passed to \code{\link{dcm2nii_bin}}.}

\item{verbose}{(logical) print diagnostic printouts}

\item{dcm2niicmd}{(character) either "dcm2niix", "dcm2nii", or "dcm2nii_2009", which 
are different versions of dcm2nii. Passed to \code{\link{dcm2nii_bin}}.}

\item{merge_files}{Should files be merged, 
passed do \code{dcm2nii} options}

\item{ignore_derived}{Should derived images be ignored,
passed do \code{dcm2nii} options}

\item{opts}{list of arguments to pass to \code{dcm2nii}.}

\item{...}{arguments to be passed to \code{\link{system}}}

\item{file}{A Par/REC file}
}
\value{
List of result of \code{system} command, names of files before and after
conversion
}
\description{
Uses Chris Rorden's dcm2nii from 
http://www.mccauslandcenter.sc.edu/mricro/mricron/dcm2nii.html to convert
DICOM files to NIfTI format.  Should Need run \code{\link{install_dcm2nii}} before running.
}
\examples{
library(utils)
install_dir = tempdir()
sysname = tolower(Sys.info()["sysname"])
cmake = Sys.which("cmake")
if (file.exists(cmake) && sysname == "windows" && 
nzchar(Sys.getenv("APPVEYOR"))) {
source_clone_dir = fs::path(Sys.getenv("APPVEYOR_BUILD_FOLDER"),
"inst", "dcm2niix_clone")
install_dcm2nii(
progdir = install_dir, 
overwrite = TRUE,
from_source = TRUE, 
verbose = 2,
source_clone_dir = source_clone_dir)
} else {
install_dcm2nii(progdir = install_dir)
}
## dcm_file = paste0("ftp://medical.nema.org/medical/Dicom/", 
## "DataSets/WG30/MGH/MR/MouseBrainSiemens15T_20150410/", 
## "Converted/DICOM/mghmousetoenhancedmr_T1w_pre.dcm")
dcm_file = paste0("http://johnmuschelli.com/dcm2niir/", 
"mghmousetoenhancedmr_T1w_pre.dcm")
tdir = tempfile()
dir.create(tdir)
destfile = tempfile(fileext = ".dcm", tmpdir = tdir)
ci = Sys.getenv("CI")
method = ifelse(ci == "", "auto", "curl")
dl = download.file(url = dcm_file, method = method, destfile = destfile)
dl == 0
stopifnot(file.exists(destfile))
fs = file.size(destfile) 
fs
if (fs <= 2e5) {
dl = download.file(url = dcm_file, destfile = destfile)
}
fs = file.size(destfile) 
fs
stopifnot(fs > 2e5)
list.files(tdir) 
dcm2niir::install_dcm2nii()
res = dcm2niir::dcm2nii(basedir = tdir, verbose = 1)
stopifnot(res$result == 0)
}
